import java.util.Random;
public class ByteCode {
	
	public static void main (String[] args) {
		int i = 5;
		i = i +5;
		// Uncomment following line to test negative numbers.
		//System.out.println("2^-5 = " + recPow(-5));
		// Uncomment folloing lines to test large factorials.
//		for (int k = 0; k<50; k++) {
//			System.out.println("2^"+k+ " = " +recPow(k));
//		}
		System.out.println(gcd(50, 35));
		Random randInt, randBool;
		randInt = new Random();
		randBool = new Random();
		for (int p = 0; p<100; p++) {
			int[] test = new int[p];
			for (int j= 0; j<p; j++) {
				boolean sign = randBool.nextBoolean();
				if (sign == true)
					test[j] = randInt.nextInt(50);
				if (sign == false)
					test[j] = -1*randInt.nextInt(50);
			}
			System.out.println("Unsorted Array " + p);
			for (int x =0; x<p; x++) {
				System.out.print(test[x] + " ");
			}
			System.out.println();
			mergeSort(test);
			System.out.println("Sorted Array " + p);
			for (int x =0; x<p; x++) {
				System.out.print(test[x] + " ");
			}
			System.out.println();
		}
		int[] test = {1, 46, 3};
		mergeSort (test);
	}
	public static int sum_for(int n) {
		int i = 0, sum = 0;
		for (i = 0; i <= n; i++) {
			sum += i;
		}
		return sum;
	}
	public static int sum_while(int n) {
		int i = 0, sum = 0;
		while (i <= n) {
			sum += i;
			i++;
		}
		return sum;
	}



	public static int fact (int n) {
		if (n==0)
			return 1;
		else
			return n*fact(n-1);
	}
	
	public static int tail (int n) {
		if (n >=100)
			return 100;
		else
			return tail(n+5);
	}
	public static int recPow (int n) {
		if (n<0)
			throw new IllegalArgumentException("No negative numbers!");
		if (n>30)
			throw new IllegalArgumentException("Number too large!");
		if (n == 0)
			return 1;
		else
			return 2*recPow(n-1);
	}
	public static void mergeSort (int[] a) {
		if ((a.length == 0) || (a.length == 1)) {
			return;
		}
		int temp;
		
		if (a.length ==2) {
			if (a[0]>a[1]) {
				temp = a[1];
				a[1] = a[0];
				a[0] = temp;
			}
		} else {
			int mid = (a.length)/2;
			int[] left = new int[mid];
			int[] right = new int [a.length - mid];
			for (int i = 0; i<mid; i++) {
				left[i] = a[i];
			}
			for (int i = 0; i<a.length- mid; i++) {
				right [i] = a[i+mid];
			}
			mergeSort (left);
			mergeSort (right);
			int i = 0;
			int j = 0;
			int place = 0;
			while ((i<left.length)&&(j<right.length)) {
				if (left[i]<= right[j]) {
					a[place] = left[i];
					place++;
					i++;
				} else {
					a[place] = right[j];
					place++;
					j++;
				}
			}
			while (i<left.length) {
				a[place] = left[i];
				place++;
				i++;
			}
			while (j<right.length) {
				a[place] = right[j];
				place++;
				j++;
			}
		}
	}
	public static int gcd (int n, int m) {
		if (m == n)
			return m;
		else if (n>m) 
			return gcd (n-m, m);
		else
			return gcd (n, m-n);
	}
}
